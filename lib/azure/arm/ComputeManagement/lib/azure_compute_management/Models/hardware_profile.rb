# Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
# Changes may cause incorrect behavior and will be lost if the code is


module Azure::ARM::Compute
  module Models
    #
    # Describes a hardware profile.
    #
    class HardwareProfile
      # @return The virtual machine size name. Possible values for this
      # property include: 'Basic_A0', 'Basic_A1', 'Basic_A2', 'Basic_A3',
      # 'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2',
      # 'Standard_A3', 'Standard_A4', 'Standard_A5', 'Standard_A6',
      # 'Standard_A7', 'Standard_A8', 'Standard_A9', 'Standard_G1',
      # 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5'
      attr_accessor :vm_size

      #
      # Validate the object. Throws ArgumentError if validation fails.
      #
      def validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.vm_size
        output_object['vmSize'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [HardwareProfile] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = HardwareProfile.new

        deserialized_property = object['vmSize']
        fail MsRest::DeserializationError.new('Error occured in deserializing the enum', nil, nil, nil) if (!deserialized_property.nil? && !deserialized_property.empty? && !Azure::ARM::Compute::VirtualMachineSizeTypes.constants.any? { |e| Azure::ARM::Compute::VirtualMachineSizeTypes.const_get(e) == deserialized_property })
        output_object.vm_size = deserialized_property

        output_object.validate

        output_object
      end
    end
  end
end
