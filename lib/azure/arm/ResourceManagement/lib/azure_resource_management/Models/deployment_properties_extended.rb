# Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
# Changes may cause incorrect behavior and will be lost if the code is


module Azure::ARM::Resources
  module Models
    #
    # Deployment properties with additional details.
    #
    class DeploymentPropertiesExtended
      # @return [String] Gets or sets the state of the provisioning.
      attr_accessor :provisioning_state

      # @return [String] Gets or sets the correlation ID of the deployment.
      attr_accessor :correlation_id

      # @return Gets or sets the timestamp of the template deployment.
      attr_accessor :timestamp

      # @return Gets or sets key/value pairs that represent deploymentoutput.
      attr_accessor :outputs

      # @return [Array<Provider>] Gets the list of resource providers needed
      # for the deployment.
      attr_accessor :providers

      # @return [Array<Dependency>] Gets the list of deployment dependencies.
      attr_accessor :dependencies

      # @return Gets or sets the template content. Use only one of Template or
      # TemplateLink.
      attr_accessor :template

      # @return [TemplateLink] Gets or sets the URI referencing the template.
      # Use only one of Template or TemplateLink.
      attr_accessor :template_link

      # @return Deployment parameters. Use only one of Parameters or
      # ParametersLink.
      attr_accessor :parameters

      # @return [ParametersLink] Gets or sets the URI referencing the
      # parameters. Use only one of Parameters or ParametersLink.
      attr_accessor :parameters_link

      # @return Gets or sets the deployment mode. Possible values for this
      # property include: 'Incremental'
      attr_accessor :mode

      def initialize
        @providers = [];
        @dependencies = [];
      end

      #
      # Validate the object. Throws ArgumentError if validation fails.
      #
      def validate
        @providers.each{ |e| e.validate if e.respond_to?(:validate) } unless @providers.nil?
        @dependencies.each{ |e| e.validate if e.respond_to?(:validate) } unless @dependencies.nil?
        @template_link.validate unless @template_link.nil?
        @parameters_link.validate unless @parameters_link.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.provisioning_state
        output_object['provisioningState'] = serialized_property unless serialized_property.nil?

        serialized_property = object.correlation_id
        output_object['correlationId'] = serialized_property unless serialized_property.nil?

        serialized_property = object.timestamp
        serialized_property = serialized_property.new_offset(0).strftime('%FT%TZ')
        output_object['timestamp'] = serialized_property unless serialized_property.nil?

        serialized_property = object.outputs
        output_object['outputs'] = serialized_property unless serialized_property.nil?

        serialized_property = object.providers
        if (serialized_property)
          serializedArray = [];
          serialized_property.each do |element|
            if (element)
              element = Azure::ARM::Resources::Models::Provider.serialize_object(element)
            end
            serializedArray.push(element);
          end
          serialized_property = serializedArray;
        end
        output_object['providers'] = serialized_property unless serialized_property.nil?

        serialized_property = object.dependencies
        if (serialized_property)
          serializedArray = [];
          serialized_property.each do |element1|
            if (element1)
              element1 = Azure::ARM::Resources::Models::Dependency.serialize_object(element1)
            end
            serializedArray.push(element1);
          end
          serialized_property = serializedArray;
        end
        output_object['dependencies'] = serialized_property unless serialized_property.nil?

        serialized_property = object.template
        output_object['template'] = serialized_property unless serialized_property.nil?

        serialized_property = object.template_link
        if (serialized_property)
          serialized_property = Azure::ARM::Resources::Models::TemplateLink.serialize_object(serialized_property)
        end
        output_object['templateLink'] = serialized_property unless serialized_property.nil?

        serialized_property = object.parameters
        output_object['parameters'] = serialized_property unless serialized_property.nil?

        serialized_property = object.parameters_link
        if (serialized_property)
          serialized_property = Azure::ARM::Resources::Models::ParametersLink.serialize_object(serialized_property)
        end
        output_object['parametersLink'] = serialized_property unless serialized_property.nil?

        serialized_property = object.mode
        output_object['mode'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [DeploymentPropertiesExtended] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = DeploymentPropertiesExtended.new

        deserialized_property = object['provisioningState']
        output_object.provisioning_state = deserialized_property

        deserialized_property = object['correlationId']
        output_object.correlation_id = deserialized_property

        deserialized_property = object['timestamp']
        deserialized_property = DateTime.parse(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.timestamp = deserialized_property

        deserialized_property = object['outputs']
        output_object.outputs = deserialized_property

        deserialized_property = object['providers']
        if (deserialized_property)
          deserializedArray = [];
          deserialized_property.each do |element2|
            if (element2)
              element2 = Azure::ARM::Resources::Models::Provider.deserialize_object(element2)
            end
            deserializedArray.push(element2);
          end
          deserialized_property = deserializedArray;
        end
        output_object.providers = deserialized_property

        deserialized_property = object['dependencies']
        if (deserialized_property)
          deserializedArray = [];
          deserialized_property.each do |element3|
            if (element3)
              element3 = Azure::ARM::Resources::Models::Dependency.deserialize_object(element3)
            end
            deserializedArray.push(element3);
          end
          deserialized_property = deserializedArray;
        end
        output_object.dependencies = deserialized_property

        deserialized_property = object['template']
        output_object.template = deserialized_property

        deserialized_property = object['templateLink']
        if (deserialized_property)
          deserialized_property = Azure::ARM::Resources::Models::TemplateLink.deserialize_object(deserialized_property)
        end
        output_object.template_link = deserialized_property

        deserialized_property = object['parameters']
        output_object.parameters = deserialized_property

        deserialized_property = object['parametersLink']
        if (deserialized_property)
          deserialized_property = Azure::ARM::Resources::Models::ParametersLink.deserialize_object(deserialized_property)
        end
        output_object.parameters_link = deserialized_property

        deserialized_property = object['mode']
        fail MsRest::DeserializationError.new('Error occured in deserializing the enum', nil, nil, nil) if (!deserialized_property.nil? && !deserialized_property.empty? && !Azure::ARM::Resources::Models::DeploymentMode.constants.any? { |e| Azure::ARM::Resources::Models::DeploymentMode.const_get(e) == deserialized_property })
        output_object.mode = deserialized_property

        output_object.validate

        output_object
      end
    end
  end
end
