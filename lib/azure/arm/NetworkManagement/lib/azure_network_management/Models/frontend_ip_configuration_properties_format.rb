# Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
# Changes may cause incorrect behavior and will be lost if the code is


module AzureNetworkManagement
  module Models
    #
    # Model object.
    #
    class FrontendIpConfigurationPropertiesFormat
      # @return [String] Gets or sets the IP address of the Load Balancer.This
      # is only specified if a specific private IP address shall be allocated
      # from the subnet specified in subnetRef
      attr_accessor :private_ipaddress

      # @return Gets or sets PrivateIP allocation method (Static/Dynamic).
      # Possible values for this property include: 'Static', 'Dynamic'
      attr_accessor :private_ipallocation_method

      # @return [SubResource] Gets or sets the reference of the subnet
      # resource.A subnet from wher the load balancer gets its private
      # frontend address
      attr_accessor :subnet

      # @return [SubResource] Gets or sets the reference of the PublicIP
      # resource
      attr_accessor :public_ipaddress

      # @return [Array<SubResource>] Read only.Inbound rules URIs that use
      # this frontend IP
      attr_accessor :inbound_nat_rules

      # @return [Array<SubResource>] Gets Load Balancing rules URIs that use
      # this frontend IP
      attr_accessor :load_balancing_rules

      # @return [String] Gets or sets Provisioning state of the PublicIP
      # resource Updating/Deleting/Failed
      attr_accessor :provisioning_state

      def initialize
        @inbound_nat_rules = [];
        @load_balancing_rules = [];
      end

      #
      # Validate the object. Throws ArgumentError if validation fails.
      #
      def validate
        @subnet.validate unless @subnet.nil?
        @public_ipaddress.validate unless @public_ipaddress.nil?
        @inbound_nat_rules.each{ |e| e.validate if e.respond_to?(:validate) } unless @inbound_nat_rules.nil?
        @load_balancing_rules.each{ |e| e.validate if e.respond_to?(:validate) } unless @load_balancing_rules.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.private_ipaddress
        output_object['privateIPAddress'] = serialized_property unless serialized_property.nil?

        serialized_property = object.private_ipallocation_method
        output_object['privateIPAllocationMethod'] = serialized_property unless serialized_property.nil?

        serialized_property = object.subnet
        if (serialized_property)
          serialized_property = AzureNetworkManagement::Models::SubResource.serialize_object(serialized_property)
        end
        output_object['subnet'] = serialized_property unless serialized_property.nil?

        serialized_property = object.public_ipaddress
        if (serialized_property)
          serialized_property = AzureNetworkManagement::Models::SubResource.serialize_object(serialized_property)
        end
        output_object['publicIPAddress'] = serialized_property unless serialized_property.nil?

        serialized_property = object.inbound_nat_rules
        if (serialized_property)
          serializedArray = [];
          serialized_property.each do |element|
            if (element)
              element = AzureNetworkManagement::Models::SubResource.serialize_object(element)
            end
            serializedArray.push(element);
          end
          serialized_property = serializedArray;
        end
        output_object['inboundNatRules'] = serialized_property unless serialized_property.nil?

        serialized_property = object.load_balancing_rules
        if (serialized_property)
          serializedArray = [];
          serialized_property.each do |element1|
            if (element1)
              element1 = AzureNetworkManagement::Models::SubResource.serialize_object(element1)
            end
            serializedArray.push(element1);
          end
          serialized_property = serializedArray;
        end
        output_object['loadBalancingRules'] = serialized_property unless serialized_property.nil?

        serialized_property = object.provisioning_state
        output_object['provisioningState'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [FrontendIpConfigurationPropertiesFormat] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = FrontendIpConfigurationPropertiesFormat.new

        deserialized_property = object['privateIPAddress']
        output_object.private_ipaddress = deserialized_property

        deserialized_property = object['privateIPAllocationMethod']
        fail MsRest::DeserializationError.new('Error occured in deserializing the enum', nil, nil, nil) if (!deserialized_property.nil? && !deserialized_property.empty? && !AzureNetworkManagement::IpAllocationMethod.constants.any? { |e| AzureNetworkManagement::IpAllocationMethod.const_get(e) == deserialized_property })
        output_object.private_ipallocation_method = deserialized_property

        deserialized_property = object['subnet']
        if (deserialized_property)
          deserialized_property = AzureNetworkManagement::Models::SubResource.deserialize_object(deserialized_property)
        end
        output_object.subnet = deserialized_property

        deserialized_property = object['publicIPAddress']
        if (deserialized_property)
          deserialized_property = AzureNetworkManagement::Models::SubResource.deserialize_object(deserialized_property)
        end
        output_object.public_ipaddress = deserialized_property

        deserialized_property = object['inboundNatRules']
        if (deserialized_property)
          deserializedArray = [];
          deserialized_property.each do |element2|
            if (element2)
              element2 = AzureNetworkManagement::Models::SubResource.deserialize_object(element2)
            end
            deserializedArray.push(element2);
          end
          deserialized_property = deserializedArray;
        end
        output_object.inbound_nat_rules = deserialized_property

        deserialized_property = object['loadBalancingRules']
        if (deserialized_property)
          deserializedArray = [];
          deserialized_property.each do |element3|
            if (element3)
              element3 = AzureNetworkManagement::Models::SubResource.deserialize_object(element3)
            end
            deserializedArray.push(element3);
          end
          deserialized_property = deserializedArray;
        end
        output_object.load_balancing_rules = deserialized_property

        deserialized_property = object['provisioningState']
        output_object.provisioning_state = deserialized_property

        output_object.validate

        output_object
      end
    end
  end
end
