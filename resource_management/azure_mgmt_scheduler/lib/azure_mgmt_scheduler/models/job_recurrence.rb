# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Scheduler
  module Models
    #
    # Model object.
    #
    class JobRecurrence

      include MsRestAzure

      # @return [RecurrenceFrequency] Gets or sets the frequency of recurrence
      # (second, minute, hour, day, week, month). Possible values include:
      # 'Minute', 'Hour', 'Day', 'Week', 'Month'
      attr_accessor :frequency

      # @return [Integer] Gets or sets the interval between retries.
      attr_accessor :interval

      # @return [Integer] Gets or sets the maximum number of times that the
      # job should run.
      attr_accessor :count

      # @return [DateTime] Gets or sets the time at which the job will
      # complete.
      attr_accessor :end_time

      # @return [JobRecurrenceSchedule]
      attr_accessor :schedule

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @schedule.validate unless @schedule.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.frequency
        output_object['frequency'] = serialized_property unless serialized_property.nil?

        serialized_property = object.interval
        output_object['interval'] = serialized_property unless serialized_property.nil?

        serialized_property = object.count
        output_object['count'] = serialized_property unless serialized_property.nil?

        serialized_property = object.end_time
        serialized_property = serialized_property.new_offset(0).strftime('%FT%TZ')
        output_object['endTime'] = serialized_property unless serialized_property.nil?

        serialized_property = object.schedule
        unless serialized_property.nil?
          serialized_property = JobRecurrenceSchedule.serialize_object(serialized_property)
        end
        output_object['schedule'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [JobRecurrence] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = JobRecurrence.new

        deserialized_property = object['frequency']
        if (!deserialized_property.nil? && !deserialized_property.empty?)
          enum_is_valid = RecurrenceFrequency.constants.any? { |e| RecurrenceFrequency.const_get(e).to_s.downcase == deserialized_property.downcase }
          warn 'Enum RecurrenceFrequency does not contain ' + deserialized_property.downcase + ', but was received from the server.' unless enum_is_valid
        end
        output_object.frequency = deserialized_property

        deserialized_property = object['interval']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.interval = deserialized_property

        deserialized_property = object['count']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.count = deserialized_property

        deserialized_property = object['endTime']
        deserialized_property = DateTime.parse(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.end_time = deserialized_property

        deserialized_property = object['schedule']
        unless deserialized_property.nil?
          deserialized_property = JobRecurrenceSchedule.deserialize_object(deserialized_property)
        end
        output_object.schedule = deserialized_property

        output_object
      end
    end
  end
end
