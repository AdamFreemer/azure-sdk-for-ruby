# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Scheduler
  module Models
    #
    # Model object.
    #
    class JobStatus

      include MsRestAzure

      # @return [Integer] Gets the number of times this job has executed.
      attr_accessor :execution_count

      # @return [Integer] Gets the number of times this job has failed.
      attr_accessor :failure_count

      # @return [Integer] Gets the number of faulted occurrences (occurrences
      # that were retried and failed as many times as the retry policy
      # states).
      attr_accessor :faulted_count

      # @return [DateTime] Gets the time the last occurrence executed in
      # ISO-8601 format.  Could be empty if job has not run yet.
      attr_accessor :last_execution_time

      # @return [DateTime] Gets the time of the next occurrence in ISO-8601
      # format. Could be empty if the job is completed.
      attr_accessor :next_execution_time

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        # Nothing to validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.execution_count
        output_object['executionCount'] = serialized_property unless serialized_property.nil?

        serialized_property = object.failure_count
        output_object['failureCount'] = serialized_property unless serialized_property.nil?

        serialized_property = object.faulted_count
        output_object['faultedCount'] = serialized_property unless serialized_property.nil?

        serialized_property = object.last_execution_time
        serialized_property = serialized_property.new_offset(0).strftime('%FT%TZ')
        output_object['lastExecutionTime'] = serialized_property unless serialized_property.nil?

        serialized_property = object.next_execution_time
        serialized_property = serialized_property.new_offset(0).strftime('%FT%TZ')
        output_object['nextExecutionTime'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [JobStatus] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = JobStatus.new

        deserialized_property = object['executionCount']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.execution_count = deserialized_property

        deserialized_property = object['failureCount']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.failure_count = deserialized_property

        deserialized_property = object['faultedCount']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.faulted_count = deserialized_property

        deserialized_property = object['lastExecutionTime']
        deserialized_property = DateTime.parse(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.last_execution_time = deserialized_property

        deserialized_property = object['nextExecutionTime']
        deserialized_property = DateTime.parse(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.next_execution_time = deserialized_property

        output_object
      end
    end
  end
end
