# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Scheduler
  module Models
    #
    # Model object.
    #
    class JobMaxRecurrence

      include MsRestAzure

      # @return [RecurrenceFrequency] Gets or sets the frequency of recurrence
      # (second, minute, hour, day, week, month). Possible values include:
      # 'Minute', 'Hour', 'Day', 'Week', 'Month'
      attr_accessor :frequency

      # @return [Integer] Gets or sets the interval between retries.
      attr_accessor :interval

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.frequency
        output_object['frequency'] = serialized_property unless serialized_property.nil?

        serialized_property = object.interval
        output_object['interval'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [JobMaxRecurrence] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = JobMaxRecurrence.new

        deserialized_property = object['frequency']
        if (!deserialized_property.nil? && !deserialized_property.empty?)
          enum_is_valid = RecurrenceFrequency.constants.any? { |e| RecurrenceFrequency.const_get(e).to_s.downcase == deserialized_property.downcase }
          warn 'Enum RecurrenceFrequency does not contain ' + deserialized_property.downcase + ', but was received from the server.' unless enum_is_valid
        end
        output_object.frequency = deserialized_property

        deserialized_property = object['interval']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.interval = deserialized_property

        output_object
      end
    end
  end
end
