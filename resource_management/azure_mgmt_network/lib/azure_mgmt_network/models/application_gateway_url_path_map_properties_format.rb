# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Network
  module Models
    #
    # Properties of probe of application gateway
    #
    class ApplicationGatewayUrlPathMapPropertiesFormat

      include MsRestAzure

      # @return [SubResource] Gets or sets default backend address pool
      # resource of URL path map
      attr_accessor :default_backend_address_pool

      # @return [SubResource] Gets or sets default backend http settings
      # resource of URL path map
      attr_accessor :default_backend_http_settings

      # @return [Array<ApplicationGatewayPathRule>] Gets or sets path rule of
      # URL path map resource
      attr_accessor :path_rules

      # @return [String] Gets or sets Provisioning state of the backend http
      # settings resource Updating/Deleting/Failed
      attr_accessor :provisioning_state

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @default_backend_address_pool.validate unless @default_backend_address_pool.nil?
        @default_backend_http_settings.validate unless @default_backend_http_settings.nil?
        @path_rules.each{ |e| e.validate if e.respond_to?(:validate) } unless @path_rules.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.default_backend_address_pool
        unless serialized_property.nil?
          serialized_property = MsRestAzure::SubResource.serialize_object(serialized_property)
        end
        output_object['defaultBackendAddressPool'] = serialized_property unless serialized_property.nil?

        serialized_property = object.default_backend_http_settings
        unless serialized_property.nil?
          serialized_property = MsRestAzure::SubResource.serialize_object(serialized_property)
        end
        output_object['defaultBackendHttpSettings'] = serialized_property unless serialized_property.nil?

        serialized_property = object.path_rules
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element|
            unless element.nil?
              element = ApplicationGatewayPathRule.serialize_object(element)
            end
            serializedArray.push(element)
          end
          serialized_property = serializedArray
        end
        output_object['pathRules'] = serialized_property unless serialized_property.nil?

        serialized_property = object.provisioning_state
        output_object['provisioningState'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [ApplicationGatewayUrlPathMapPropertiesFormat] Deserialized
      # object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = ApplicationGatewayUrlPathMapPropertiesFormat.new

        deserialized_property = object['defaultBackendAddressPool']
        unless deserialized_property.nil?
          deserialized_property = MsRestAzure::SubResource.deserialize_object(deserialized_property)
        end
        output_object.default_backend_address_pool = deserialized_property

        deserialized_property = object['defaultBackendHttpSettings']
        unless deserialized_property.nil?
          deserialized_property = MsRestAzure::SubResource.deserialize_object(deserialized_property)
        end
        output_object.default_backend_http_settings = deserialized_property

        deserialized_property = object['pathRules']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element1|
            unless element1.nil?
              element1 = ApplicationGatewayPathRule.deserialize_object(element1)
            end
            deserialized_array.push(element1)
          end
          deserialized_property = deserialized_array
        end
        output_object.path_rules = deserialized_property

        deserialized_property = object['provisioningState']
        output_object.provisioning_state = deserialized_property

        output_object
      end
    end
  end
end
