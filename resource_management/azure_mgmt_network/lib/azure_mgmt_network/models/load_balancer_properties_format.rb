# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Network
  module Models
    #
    # Properties of Load Balancer
    #
    class LoadBalancerPropertiesFormat

      include MsRestAzure

      # @return [Array<FrontendIPConfiguration>] Gets or sets frontend IP
      # addresses of the load balancer
      attr_accessor :frontend_ipconfigurations

      # @return [Array<BackendAddressPool>] Gets or sets Pools of backend IP
      # addresseses
      attr_accessor :backend_address_pools

      # @return [Array<LoadBalancingRule>] Gets or sets loadbalancing rules
      attr_accessor :load_balancing_rules

      # @return [Array<Probe>] Gets or sets list of Load balancer probes
      attr_accessor :probes

      # @return [Array<InboundNatRule>] Gets or sets list of inbound rules
      attr_accessor :inbound_nat_rules

      # @return [Array<InboundNatPool>] Gets or sets inbound NAT pools
      attr_accessor :inbound_nat_pools

      # @return [Array<OutboundNatRule>] Gets or sets outbound NAT rules
      attr_accessor :outbound_nat_rules

      # @return [String] Gets or sets resource guid property of the Load
      # balancer resource
      attr_accessor :resource_guid

      # @return [String] Gets or sets Provisioning state of the PublicIP
      # resource Updating/Deleting/Failed
      attr_accessor :provisioning_state

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @frontend_ipconfigurations.each{ |e| e.validate if e.respond_to?(:validate) } unless @frontend_ipconfigurations.nil?
        @backend_address_pools.each{ |e| e.validate if e.respond_to?(:validate) } unless @backend_address_pools.nil?
        @load_balancing_rules.each{ |e| e.validate if e.respond_to?(:validate) } unless @load_balancing_rules.nil?
        @probes.each{ |e| e.validate if e.respond_to?(:validate) } unless @probes.nil?
        @inbound_nat_rules.each{ |e| e.validate if e.respond_to?(:validate) } unless @inbound_nat_rules.nil?
        @inbound_nat_pools.each{ |e| e.validate if e.respond_to?(:validate) } unless @inbound_nat_pools.nil?
        @outbound_nat_rules.each{ |e| e.validate if e.respond_to?(:validate) } unless @outbound_nat_rules.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.frontend_ipconfigurations
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element|
            unless element.nil?
              element = FrontendIPConfiguration.serialize_object(element)
            end
            serializedArray.push(element)
          end
          serialized_property = serializedArray
        end
        output_object['frontendIPConfigurations'] = serialized_property unless serialized_property.nil?

        serialized_property = object.backend_address_pools
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element1|
            unless element1.nil?
              element1 = BackendAddressPool.serialize_object(element1)
            end
            serializedArray.push(element1)
          end
          serialized_property = serializedArray
        end
        output_object['backendAddressPools'] = serialized_property unless serialized_property.nil?

        serialized_property = object.load_balancing_rules
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element2|
            unless element2.nil?
              element2 = LoadBalancingRule.serialize_object(element2)
            end
            serializedArray.push(element2)
          end
          serialized_property = serializedArray
        end
        output_object['loadBalancingRules'] = serialized_property unless serialized_property.nil?

        serialized_property = object.probes
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element3|
            unless element3.nil?
              element3 = Probe.serialize_object(element3)
            end
            serializedArray.push(element3)
          end
          serialized_property = serializedArray
        end
        output_object['probes'] = serialized_property unless serialized_property.nil?

        serialized_property = object.inbound_nat_rules
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element4|
            unless element4.nil?
              element4 = InboundNatRule.serialize_object(element4)
            end
            serializedArray.push(element4)
          end
          serialized_property = serializedArray
        end
        output_object['inboundNatRules'] = serialized_property unless serialized_property.nil?

        serialized_property = object.inbound_nat_pools
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element5|
            unless element5.nil?
              element5 = InboundNatPool.serialize_object(element5)
            end
            serializedArray.push(element5)
          end
          serialized_property = serializedArray
        end
        output_object['inboundNatPools'] = serialized_property unless serialized_property.nil?

        serialized_property = object.outbound_nat_rules
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element6|
            unless element6.nil?
              element6 = OutboundNatRule.serialize_object(element6)
            end
            serializedArray.push(element6)
          end
          serialized_property = serializedArray
        end
        output_object['outboundNatRules'] = serialized_property unless serialized_property.nil?

        serialized_property = object.resource_guid
        output_object['resourceGuid'] = serialized_property unless serialized_property.nil?

        serialized_property = object.provisioning_state
        output_object['provisioningState'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [LoadBalancerPropertiesFormat] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = LoadBalancerPropertiesFormat.new

        deserialized_property = object['frontendIPConfigurations']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element7|
            unless element7.nil?
              element7 = FrontendIPConfiguration.deserialize_object(element7)
            end
            deserialized_array.push(element7)
          end
          deserialized_property = deserialized_array
        end
        output_object.frontend_ipconfigurations = deserialized_property

        deserialized_property = object['backendAddressPools']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element8|
            unless element8.nil?
              element8 = BackendAddressPool.deserialize_object(element8)
            end
            deserialized_array.push(element8)
          end
          deserialized_property = deserialized_array
        end
        output_object.backend_address_pools = deserialized_property

        deserialized_property = object['loadBalancingRules']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element9|
            unless element9.nil?
              element9 = LoadBalancingRule.deserialize_object(element9)
            end
            deserialized_array.push(element9)
          end
          deserialized_property = deserialized_array
        end
        output_object.load_balancing_rules = deserialized_property

        deserialized_property = object['probes']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element10|
            unless element10.nil?
              element10 = Probe.deserialize_object(element10)
            end
            deserialized_array.push(element10)
          end
          deserialized_property = deserialized_array
        end
        output_object.probes = deserialized_property

        deserialized_property = object['inboundNatRules']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element11|
            unless element11.nil?
              element11 = InboundNatRule.deserialize_object(element11)
            end
            deserialized_array.push(element11)
          end
          deserialized_property = deserialized_array
        end
        output_object.inbound_nat_rules = deserialized_property

        deserialized_property = object['inboundNatPools']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element12|
            unless element12.nil?
              element12 = InboundNatPool.deserialize_object(element12)
            end
            deserialized_array.push(element12)
          end
          deserialized_property = deserialized_array
        end
        output_object.inbound_nat_pools = deserialized_property

        deserialized_property = object['outboundNatRules']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element13|
            unless element13.nil?
              element13 = OutboundNatRule.deserialize_object(element13)
            end
            deserialized_array.push(element13)
          end
          deserialized_property = deserialized_array
        end
        output_object.outbound_nat_rules = deserialized_property

        deserialized_property = object['resourceGuid']
        output_object.resource_guid = deserialized_property

        deserialized_property = object['provisioningState']
        output_object.provisioning_state = deserialized_property

        output_object
      end
    end
  end
end
