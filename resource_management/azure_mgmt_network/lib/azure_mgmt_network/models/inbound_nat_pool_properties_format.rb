# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Network
  module Models
    #
    # Properties of Inbound NAT pool
    #
    class InboundNatPoolPropertiesFormat

      include MsRestAzure

      # @return [SubResource] Gets or sets a reference to frontend IP Addresses
      attr_accessor :frontend_ipconfiguration

      # @return [TransportProtocol] Gets or sets the transport potocol for the
      # external endpoint. Possible values are Udp or Tcp. Possible values
      # include: 'Udp', 'Tcp'
      attr_accessor :protocol

      # @return [Integer] Gets or sets the starting port range for the NAT
      # pool. You can spcify any port number you choose, but the port numbers
      # specified for each role in the service must be unique. Possible
      # values range between 1 and 65535, inclusive
      attr_accessor :frontend_port_range_start

      # @return [Integer] Gets or sets the ending port range for the NAT pool.
      # You can spcify any port number you choose, but the port numbers
      # specified for each role in the service must be unique. Possible
      # values range between 1 and 65535, inclusive
      attr_accessor :frontend_port_range_end

      # @return [Integer] Gets or sets a port used for internal connections on
      # the endpoint. The localPort attribute maps the eternal port of the
      # endpoint to an internal port on a role. This is useful in scenarios
      # where a role must communicate to an internal compotnent on a port
      # that is different from the one that is exposed externally. If not
      # specified, the value of localPort is the same as the port attribute.
      # Set the value of localPort to '*' to automatically assign an
      # unallocated port that is discoverable using the runtime API
      attr_accessor :backend_port

      # @return [String] Gets or sets Provisioning state of the PublicIP
      # resource Updating/Deleting/Failed
      attr_accessor :provisioning_state

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        fail MsRest::ValidationError, 'property protocol is nil' if @protocol.nil?
        fail MsRest::ValidationError, 'property frontend_port_range_start is nil' if @frontend_port_range_start.nil?
        fail MsRest::ValidationError, 'property frontend_port_range_end is nil' if @frontend_port_range_end.nil?
        fail MsRest::ValidationError, 'property backend_port is nil' if @backend_port.nil?
        @frontend_ipconfiguration.validate unless @frontend_ipconfiguration.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.protocol
        output_object['protocol'] = serialized_property unless serialized_property.nil?

        serialized_property = object.frontend_port_range_start
        output_object['frontendPortRangeStart'] = serialized_property unless serialized_property.nil?

        serialized_property = object.frontend_port_range_end
        output_object['frontendPortRangeEnd'] = serialized_property unless serialized_property.nil?

        serialized_property = object.backend_port
        output_object['backendPort'] = serialized_property unless serialized_property.nil?

        serialized_property = object.frontend_ipconfiguration
        unless serialized_property.nil?
          serialized_property = MsRestAzure::SubResource.serialize_object(serialized_property)
        end
        output_object['frontendIPConfiguration'] = serialized_property unless serialized_property.nil?

        serialized_property = object.provisioning_state
        output_object['provisioningState'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [InboundNatPoolPropertiesFormat] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = InboundNatPoolPropertiesFormat.new

        deserialized_property = object['protocol']
        if (!deserialized_property.nil? && !deserialized_property.empty?)
          enum_is_valid = TransportProtocol.constants.any? { |e| TransportProtocol.const_get(e).to_s.downcase == deserialized_property.downcase }
          warn 'Enum TransportProtocol does not contain ' + deserialized_property.downcase + ', but was received from the server.' unless enum_is_valid
        end
        output_object.protocol = deserialized_property

        deserialized_property = object['frontendPortRangeStart']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.frontend_port_range_start = deserialized_property

        deserialized_property = object['frontendPortRangeEnd']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.frontend_port_range_end = deserialized_property

        deserialized_property = object['backendPort']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.backend_port = deserialized_property

        deserialized_property = object['frontendIPConfiguration']
        unless deserialized_property.nil?
          deserialized_property = MsRestAzure::SubResource.deserialize_object(deserialized_property)
        end
        output_object.frontend_ipconfiguration = deserialized_property

        deserialized_property = object['provisioningState']
        output_object.provisioning_state = deserialized_property

        output_object
      end
    end
  end
end
