# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Network
  module Models
    #
    # Outbound NAT pool of the loadbalancer
    #
    class OutboundNatRulePropertiesFormat

      include MsRestAzure

      # @return [Integer] Gets or sets the number of outbound ports to be used
      # for SNAT
      attr_accessor :allocated_outbound_ports

      # @return [Array<SubResource>] Gets or sets Frontend IP addresses of the
      # load balancer
      attr_accessor :frontend_ipconfigurations

      # @return [SubResource] Gets or sets a reference to a pool of DIPs.
      # Outbound traffic is randomly load balanced across IPs in the backend
      # IPs
      attr_accessor :backend_address_pool

      # @return [String] Gets or sets Provisioning state of the PublicIP
      # resource Updating/Deleting/Failed
      attr_accessor :provisioning_state

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        fail MsRest::ValidationError, 'property backend_address_pool is nil' if @backend_address_pool.nil?
        @frontend_ipconfigurations.each{ |e| e.validate if e.respond_to?(:validate) } unless @frontend_ipconfigurations.nil?
        @backend_address_pool.validate unless @backend_address_pool.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.backend_address_pool
        unless serialized_property.nil?
          serialized_property = MsRestAzure::SubResource.serialize_object(serialized_property)
        end
        output_object['backendAddressPool'] = serialized_property unless serialized_property.nil?

        serialized_property = object.allocated_outbound_ports
        output_object['allocatedOutboundPorts'] = serialized_property unless serialized_property.nil?

        serialized_property = object.frontend_ipconfigurations
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element|
            unless element.nil?
              element = MsRestAzure::SubResource.serialize_object(element)
            end
            serializedArray.push(element)
          end
          serialized_property = serializedArray
        end
        output_object['frontendIPConfigurations'] = serialized_property unless serialized_property.nil?

        serialized_property = object.provisioning_state
        output_object['provisioningState'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [OutboundNatRulePropertiesFormat] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = OutboundNatRulePropertiesFormat.new

        deserialized_property = object['backendAddressPool']
        unless deserialized_property.nil?
          deserialized_property = MsRestAzure::SubResource.deserialize_object(deserialized_property)
        end
        output_object.backend_address_pool = deserialized_property

        deserialized_property = object['allocatedOutboundPorts']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.allocated_outbound_ports = deserialized_property

        deserialized_property = object['frontendIPConfigurations']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element1|
            unless element1.nil?
              element1 = MsRestAzure::SubResource.deserialize_object(element1)
            end
            deserialized_array.push(element1)
          end
          deserialized_property = deserialized_array
        end
        output_object.frontend_ipconfigurations = deserialized_property

        deserialized_property = object['provisioningState']
        output_object.provisioning_state = deserialized_property

        output_object
      end
    end
  end
end
