# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Network
  module Models
    #
    # Model object.
    #
    class ExpressRouteCircuitPeeringPropertiesFormat

      include MsRestAzure

      # @return [ExpressRouteCircuitPeeringType] Gets or sets PeeringType.
      # Possible values include: 'AzurePublicPeering', 'AzurePrivatePeering',
      # 'MicrosoftPeering'
      attr_accessor :peering_type

      # @return [ExpressRouteCircuitPeeringState] Gets or sets state of
      # Peering. Possible values include: 'Disabled', 'Enabled'
      attr_accessor :state

      # @return [Integer] Gets or sets the azure ASN
      attr_accessor :azure_asn

      # @return [Integer] Gets or sets the peer ASN
      attr_accessor :peer_asn

      # @return [String] Gets or sets the primary address prefix
      attr_accessor :primary_peer_address_prefix

      # @return [String] Gets or sets the secondary address prefix
      attr_accessor :secondary_peer_address_prefix

      # @return [String] Gets or sets the primary port
      attr_accessor :primary_azure_port

      # @return [String] Gets or sets the secondary port
      attr_accessor :secondary_azure_port

      # @return [String] Gets or sets the shared key
      attr_accessor :shared_key

      # @return [Integer] Gets or sets the vlan id
      attr_accessor :vlan_id

      # @return [ExpressRouteCircuitPeeringConfig] Gets or sets the mircosoft
      # peering config
      attr_accessor :microsoft_peering_config

      # @return [ExpressRouteCircuitStats] Gets or peering stats
      attr_accessor :stats

      # @return [String] Gets or sets Provisioning state of the PublicIP
      # resource Updating/Deleting/Failed
      attr_accessor :provisioning_state

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @microsoft_peering_config.validate unless @microsoft_peering_config.nil?
        @stats.validate unless @stats.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.peering_type
        output_object['peeringType'] = serialized_property unless serialized_property.nil?

        serialized_property = object.state
        output_object['state'] = serialized_property unless serialized_property.nil?

        serialized_property = object.azure_asn
        output_object['azureASN'] = serialized_property unless serialized_property.nil?

        serialized_property = object.peer_asn
        output_object['peerASN'] = serialized_property unless serialized_property.nil?

        serialized_property = object.primary_peer_address_prefix
        output_object['primaryPeerAddressPrefix'] = serialized_property unless serialized_property.nil?

        serialized_property = object.secondary_peer_address_prefix
        output_object['secondaryPeerAddressPrefix'] = serialized_property unless serialized_property.nil?

        serialized_property = object.primary_azure_port
        output_object['primaryAzurePort'] = serialized_property unless serialized_property.nil?

        serialized_property = object.secondary_azure_port
        output_object['secondaryAzurePort'] = serialized_property unless serialized_property.nil?

        serialized_property = object.shared_key
        output_object['sharedKey'] = serialized_property unless serialized_property.nil?

        serialized_property = object.vlan_id
        output_object['vlanId'] = serialized_property unless serialized_property.nil?

        serialized_property = object.microsoft_peering_config
        unless serialized_property.nil?
          serialized_property = ExpressRouteCircuitPeeringConfig.serialize_object(serialized_property)
        end
        output_object['microsoftPeeringConfig'] = serialized_property unless serialized_property.nil?

        serialized_property = object.stats
        unless serialized_property.nil?
          serialized_property = ExpressRouteCircuitStats.serialize_object(serialized_property)
        end
        output_object['stats'] = serialized_property unless serialized_property.nil?

        serialized_property = object.provisioning_state
        output_object['provisioningState'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [ExpressRouteCircuitPeeringPropertiesFormat] Deserialized
      # object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = ExpressRouteCircuitPeeringPropertiesFormat.new

        deserialized_property = object['peeringType']
        if (!deserialized_property.nil? && !deserialized_property.empty?)
          enum_is_valid = ExpressRouteCircuitPeeringType.constants.any? { |e| ExpressRouteCircuitPeeringType.const_get(e).to_s.downcase == deserialized_property.downcase }
          warn 'Enum ExpressRouteCircuitPeeringType does not contain ' + deserialized_property.downcase + ', but was received from the server.' unless enum_is_valid
        end
        output_object.peering_type = deserialized_property

        deserialized_property = object['state']
        if (!deserialized_property.nil? && !deserialized_property.empty?)
          enum_is_valid = ExpressRouteCircuitPeeringState.constants.any? { |e| ExpressRouteCircuitPeeringState.const_get(e).to_s.downcase == deserialized_property.downcase }
          warn 'Enum ExpressRouteCircuitPeeringState does not contain ' + deserialized_property.downcase + ', but was received from the server.' unless enum_is_valid
        end
        output_object.state = deserialized_property

        deserialized_property = object['azureASN']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.azure_asn = deserialized_property

        deserialized_property = object['peerASN']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.peer_asn = deserialized_property

        deserialized_property = object['primaryPeerAddressPrefix']
        output_object.primary_peer_address_prefix = deserialized_property

        deserialized_property = object['secondaryPeerAddressPrefix']
        output_object.secondary_peer_address_prefix = deserialized_property

        deserialized_property = object['primaryAzurePort']
        output_object.primary_azure_port = deserialized_property

        deserialized_property = object['secondaryAzurePort']
        output_object.secondary_azure_port = deserialized_property

        deserialized_property = object['sharedKey']
        output_object.shared_key = deserialized_property

        deserialized_property = object['vlanId']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.vlan_id = deserialized_property

        deserialized_property = object['microsoftPeeringConfig']
        unless deserialized_property.nil?
          deserialized_property = ExpressRouteCircuitPeeringConfig.deserialize_object(deserialized_property)
        end
        output_object.microsoft_peering_config = deserialized_property

        deserialized_property = object['stats']
        unless deserialized_property.nil?
          deserialized_property = ExpressRouteCircuitStats.deserialize_object(deserialized_property)
        end
        output_object.stats = deserialized_property

        deserialized_property = object['provisioningState']
        output_object.provisioning_state = deserialized_property

        output_object
      end
    end
  end
end
