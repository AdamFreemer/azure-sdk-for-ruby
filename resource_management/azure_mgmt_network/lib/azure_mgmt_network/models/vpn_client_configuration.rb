# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Network
  module Models
    #
    # VpnClientConfiguration for P2S client
    #
    class VpnClientConfiguration

      include MsRestAzure

      # @return [AddressSpace] Gets or sets the reference of the Address space
      # resource which represents Address space for P2S VpnClient.
      attr_accessor :vpn_client_address_pool

      # @return [Array<VpnClientRootCertificate>] VpnClientRootCertificate for
      # Virtual network gateway.
      attr_accessor :vpn_client_root_certificates

      # @return [Array<VpnClientRevokedCertificate>]
      # VpnClientRevokedCertificate for Virtual network gateway.
      attr_accessor :vpn_client_revoked_certificates

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @vpn_client_address_pool.validate unless @vpn_client_address_pool.nil?
        @vpn_client_root_certificates.each{ |e| e.validate if e.respond_to?(:validate) } unless @vpn_client_root_certificates.nil?
        @vpn_client_revoked_certificates.each{ |e| e.validate if e.respond_to?(:validate) } unless @vpn_client_revoked_certificates.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.vpn_client_address_pool
        unless serialized_property.nil?
          serialized_property = AddressSpace.serialize_object(serialized_property)
        end
        output_object['vpnClientAddressPool'] = serialized_property unless serialized_property.nil?

        serialized_property = object.vpn_client_root_certificates
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element|
            unless element.nil?
              element = VpnClientRootCertificate.serialize_object(element)
            end
            serializedArray.push(element)
          end
          serialized_property = serializedArray
        end
        output_object['vpnClientRootCertificates'] = serialized_property unless serialized_property.nil?

        serialized_property = object.vpn_client_revoked_certificates
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element1|
            unless element1.nil?
              element1 = VpnClientRevokedCertificate.serialize_object(element1)
            end
            serializedArray.push(element1)
          end
          serialized_property = serializedArray
        end
        output_object['vpnClientRevokedCertificates'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [VpnClientConfiguration] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = VpnClientConfiguration.new

        deserialized_property = object['vpnClientAddressPool']
        unless deserialized_property.nil?
          deserialized_property = AddressSpace.deserialize_object(deserialized_property)
        end
        output_object.vpn_client_address_pool = deserialized_property

        deserialized_property = object['vpnClientRootCertificates']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element2|
            unless element2.nil?
              element2 = VpnClientRootCertificate.deserialize_object(element2)
            end
            deserialized_array.push(element2)
          end
          deserialized_property = deserialized_array
        end
        output_object.vpn_client_root_certificates = deserialized_property

        deserialized_property = object['vpnClientRevokedCertificates']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element3|
            unless element3.nil?
              element3 = VpnClientRevokedCertificate.deserialize_object(element3)
            end
            deserialized_array.push(element3)
          end
          deserialized_property = deserialized_array
        end
        output_object.vpn_client_revoked_certificates = deserialized_property

        output_object
      end
    end
  end
end
