# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Network
  module Models
    #
    # Network Security Group resource
    #
    class NetworkSecurityGroupPropertiesFormat

      include MsRestAzure

      # @return [Array<SecurityRule>] Gets or sets Security rules of network
      # security group
      attr_accessor :security_rules

      # @return [Array<SecurityRule>] Gets or sets Default security rules of
      # network security group
      attr_accessor :default_security_rules

      # @return [Array<NetworkInterface>] Gets collection of references to
      # Network Interfaces
      attr_accessor :network_interfaces

      # @return [Array<Subnet>] Gets collection of references to subnets
      attr_accessor :subnets

      # @return [String] Gets or sets resource guid property of the network
      # security group resource
      attr_accessor :resource_guid

      # @return [String] Gets or sets Provisioning state of the PublicIP
      # resource Updating/Deleting/Failed
      attr_accessor :provisioning_state

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @security_rules.each{ |e| e.validate if e.respond_to?(:validate) } unless @security_rules.nil?
        @default_security_rules.each{ |e| e.validate if e.respond_to?(:validate) } unless @default_security_rules.nil?
        @network_interfaces.each{ |e| e.validate if e.respond_to?(:validate) } unless @network_interfaces.nil?
        @subnets.each{ |e| e.validate if e.respond_to?(:validate) } unless @subnets.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.security_rules
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element|
            unless element.nil?
              element = SecurityRule.serialize_object(element)
            end
            serializedArray.push(element)
          end
          serialized_property = serializedArray
        end
        output_object['securityRules'] = serialized_property unless serialized_property.nil?

        serialized_property = object.default_security_rules
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element1|
            unless element1.nil?
              element1 = SecurityRule.serialize_object(element1)
            end
            serializedArray.push(element1)
          end
          serialized_property = serializedArray
        end
        output_object['defaultSecurityRules'] = serialized_property unless serialized_property.nil?

        serialized_property = object.network_interfaces
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element2|
            unless element2.nil?
              element2 = NetworkInterface.serialize_object(element2)
            end
            serializedArray.push(element2)
          end
          serialized_property = serializedArray
        end
        output_object['networkInterfaces'] = serialized_property unless serialized_property.nil?

        serialized_property = object.subnets
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element3|
            unless element3.nil?
              element3 = Subnet.serialize_object(element3)
            end
            serializedArray.push(element3)
          end
          serialized_property = serializedArray
        end
        output_object['subnets'] = serialized_property unless serialized_property.nil?

        serialized_property = object.resource_guid
        output_object['resourceGuid'] = serialized_property unless serialized_property.nil?

        serialized_property = object.provisioning_state
        output_object['provisioningState'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [NetworkSecurityGroupPropertiesFormat] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = NetworkSecurityGroupPropertiesFormat.new

        deserialized_property = object['securityRules']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element4|
            unless element4.nil?
              element4 = SecurityRule.deserialize_object(element4)
            end
            deserialized_array.push(element4)
          end
          deserialized_property = deserialized_array
        end
        output_object.security_rules = deserialized_property

        deserialized_property = object['defaultSecurityRules']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element5|
            unless element5.nil?
              element5 = SecurityRule.deserialize_object(element5)
            end
            deserialized_array.push(element5)
          end
          deserialized_property = deserialized_array
        end
        output_object.default_security_rules = deserialized_property

        deserialized_property = object['networkInterfaces']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element6|
            unless element6.nil?
              element6 = NetworkInterface.deserialize_object(element6)
            end
            deserialized_array.push(element6)
          end
          deserialized_property = deserialized_array
        end
        output_object.network_interfaces = deserialized_property

        deserialized_property = object['subnets']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element7|
            unless element7.nil?
              element7 = Subnet.deserialize_object(element7)
            end
            deserialized_array.push(element7)
          end
          deserialized_property = deserialized_array
        end
        output_object.subnets = deserialized_property

        deserialized_property = object['resourceGuid']
        output_object.resource_guid = deserialized_property

        deserialized_property = object['provisioningState']
        output_object.provisioning_state = deserialized_property

        output_object
      end
    end
  end
end
