# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Network
  module Models
    #
    # Properties of ExpressRouteCircuit
    #
    class ExpressRouteCircuitPropertiesFormat

      include MsRestAzure

      # @return [String] Gets or sets CircuitProvisioningState state of the
      # resource
      attr_accessor :circuit_provisioning_state

      # @return [ServiceProviderProvisioningState] Gets or sets
      # ServiceProviderProvisioningState state of the resource . Possible
      # values include: 'NotProvisioned', 'Provisioning', 'Provisioned',
      # 'Deprovisioning'
      attr_accessor :service_provider_provisioning_state

      # @return [Array<ExpressRouteCircuitAuthorization>] Gets or sets list of
      # authorizations
      attr_accessor :authorizations

      # @return [Array<ExpressRouteCircuitPeering>] Gets or sets list of
      # peerings
      attr_accessor :peerings

      # @return [String] Gets or sets ServiceKey
      attr_accessor :service_key

      # @return [String] Gets or sets ServiceProviderNotes
      attr_accessor :service_provider_notes

      # @return [ExpressRouteCircuitServiceProviderProperties] Gets or sets
      # ServiceProviderProperties
      attr_accessor :service_provider_properties

      # @return [String] Gets or sets Provisioning state of the PublicIP
      # resource Updating/Deleting/Failed
      attr_accessor :provisioning_state

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @authorizations.each{ |e| e.validate if e.respond_to?(:validate) } unless @authorizations.nil?
        @peerings.each{ |e| e.validate if e.respond_to?(:validate) } unless @peerings.nil?
        @service_provider_properties.validate unless @service_provider_properties.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.circuit_provisioning_state
        output_object['circuitProvisioningState'] = serialized_property unless serialized_property.nil?

        serialized_property = object.service_provider_provisioning_state
        output_object['serviceProviderProvisioningState'] = serialized_property unless serialized_property.nil?

        serialized_property = object.authorizations
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element|
            unless element.nil?
              element = ExpressRouteCircuitAuthorization.serialize_object(element)
            end
            serializedArray.push(element)
          end
          serialized_property = serializedArray
        end
        output_object['authorizations'] = serialized_property unless serialized_property.nil?

        serialized_property = object.peerings
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element1|
            unless element1.nil?
              element1 = ExpressRouteCircuitPeering.serialize_object(element1)
            end
            serializedArray.push(element1)
          end
          serialized_property = serializedArray
        end
        output_object['peerings'] = serialized_property unless serialized_property.nil?

        serialized_property = object.service_key
        output_object['serviceKey'] = serialized_property unless serialized_property.nil?

        serialized_property = object.service_provider_notes
        output_object['serviceProviderNotes'] = serialized_property unless serialized_property.nil?

        serialized_property = object.service_provider_properties
        unless serialized_property.nil?
          serialized_property = ExpressRouteCircuitServiceProviderProperties.serialize_object(serialized_property)
        end
        output_object['serviceProviderProperties'] = serialized_property unless serialized_property.nil?

        serialized_property = object.provisioning_state
        output_object['provisioningState'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [ExpressRouteCircuitPropertiesFormat] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = ExpressRouteCircuitPropertiesFormat.new

        deserialized_property = object['circuitProvisioningState']
        output_object.circuit_provisioning_state = deserialized_property

        deserialized_property = object['serviceProviderProvisioningState']
        if (!deserialized_property.nil? && !deserialized_property.empty?)
          enum_is_valid = ServiceProviderProvisioningState.constants.any? { |e| ServiceProviderProvisioningState.const_get(e).to_s.downcase == deserialized_property.downcase }
          warn 'Enum ServiceProviderProvisioningState does not contain ' + deserialized_property.downcase + ', but was received from the server.' unless enum_is_valid
        end
        output_object.service_provider_provisioning_state = deserialized_property

        deserialized_property = object['authorizations']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element2|
            unless element2.nil?
              element2 = ExpressRouteCircuitAuthorization.deserialize_object(element2)
            end
            deserialized_array.push(element2)
          end
          deserialized_property = deserialized_array
        end
        output_object.authorizations = deserialized_property

        deserialized_property = object['peerings']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element3|
            unless element3.nil?
              element3 = ExpressRouteCircuitPeering.deserialize_object(element3)
            end
            deserialized_array.push(element3)
          end
          deserialized_property = deserialized_array
        end
        output_object.peerings = deserialized_property

        deserialized_property = object['serviceKey']
        output_object.service_key = deserialized_property

        deserialized_property = object['serviceProviderNotes']
        output_object.service_provider_notes = deserialized_property

        deserialized_property = object['serviceProviderProperties']
        unless deserialized_property.nil?
          deserialized_property = ExpressRouteCircuitServiceProviderProperties.deserialize_object(deserialized_property)
        end
        output_object.service_provider_properties = deserialized_property

        deserialized_property = object['provisioningState']
        output_object.provisioning_state = deserialized_property

        output_object
      end
    end
  end
end
