# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Network
  module Models
    #
    # Specfies the peering config
    #
    class ExpressRouteCircuitPeeringConfig

      include MsRestAzure

      # @return [Array<String>] Gets or sets the reference of
      # AdvertisedPublicPrefixes
      attr_accessor :advertised_public_prefixes

      # @return [ExpressRouteCircuitPeeringAdvertisedPublicPrefixState] Gets
      # or sets AdvertisedPublicPrefixState of the Peering resource .
      # Possible values include: 'NotConfigured', 'Configuring',
      # 'Configured', 'ValidationNeeded'
      attr_accessor :advertised_public_prefixes_state

      # @return [Integer] Gets or Sets CustomerAsn of the peering.
      attr_accessor :customer_asn

      # @return [String] Gets or Sets RoutingRegistryName of the config.
      attr_accessor :routing_registry_name

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @advertised_public_prefixes.each{ |e| e.validate if e.respond_to?(:validate) } unless @advertised_public_prefixes.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.advertised_public_prefixes
        output_object['advertisedPublicPrefixes'] = serialized_property unless serialized_property.nil?

        serialized_property = object.advertised_public_prefixes_state
        output_object['advertisedPublicPrefixesState'] = serialized_property unless serialized_property.nil?

        serialized_property = object.customer_asn
        output_object['customerASN'] = serialized_property unless serialized_property.nil?

        serialized_property = object.routing_registry_name
        output_object['routingRegistryName'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [ExpressRouteCircuitPeeringConfig] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = ExpressRouteCircuitPeeringConfig.new

        deserialized_property = object['advertisedPublicPrefixes']
        output_object.advertised_public_prefixes = deserialized_property

        deserialized_property = object['advertisedPublicPrefixesState']
        if (!deserialized_property.nil? && !deserialized_property.empty?)
          enum_is_valid = ExpressRouteCircuitPeeringAdvertisedPublicPrefixState.constants.any? { |e| ExpressRouteCircuitPeeringAdvertisedPublicPrefixState.const_get(e).to_s.downcase == deserialized_property.downcase }
          warn 'Enum ExpressRouteCircuitPeeringAdvertisedPublicPrefixState does not contain ' + deserialized_property.downcase + ', but was received from the server.' unless enum_is_valid
        end
        output_object.advertised_public_prefixes_state = deserialized_property

        deserialized_property = object['customerASN']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.customer_asn = deserialized_property

        deserialized_property = object['routingRegistryName']
        output_object.routing_registry_name = deserialized_property

        output_object
      end
    end
  end
end
