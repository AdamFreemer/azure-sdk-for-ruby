# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Network
  module Models
    #
    # Properties of Application Gateway
    #
    class ApplicationGatewayPropertiesFormat

      include MsRestAzure

      # @return [ApplicationGatewaySku] Gets or sets sku of application
      # gateway resource
      attr_accessor :sku

      # @return [ApplicationGatewayOperationalState] Gets operational state of
      # application gateway resource. Possible values for this property
      # include: 'Stopped', 'Starting', 'Running', 'Stopping'.
      attr_accessor :operational_state

      # @return [Array<ApplicationGatewayIpConfiguration>] Gets or sets
      # subnets of application gateway resource
      attr_accessor :gateway_ip_configurations

      # @return [Array<ApplicationGatewaySslCertificate>] Gets or sets ssl
      # certificates of application gateway resource
      attr_accessor :ssl_certificates

      # @return [Array<ApplicationGatewayFrontendIpConfiguration>] Gets or
      # sets frontend IP addresses of application gateway resource
      attr_accessor :frontend_ip_configurations

      # @return [Array<ApplicationGatewayFrontendPort>] Gets or sets frontend
      # ports of application gateway resource
      attr_accessor :frontend_ports

      # @return [Array<ApplicationGatewayBackendAddressPool>] Gets or sets
      # backend address pool of application gateway resource
      attr_accessor :backend_address_pools

      # @return [Array<ApplicationGatewayBackendHttpSettings>] Gets or sets
      # backend http settings of application gateway resource
      attr_accessor :backend_http_settings_collection

      # @return [Array<ApplicationGatewayHttpListener>] Gets or sets HTTP
      # listeners of application gateway resource
      attr_accessor :http_listeners

      # @return [Array<ApplicationGatewayRequestRoutingRule>] Gets or sets
      # request routing rules of application gateway resource
      attr_accessor :request_routing_rules

      # @return [String] Gets or sets Provisioning state of the
      # ApplicationGateway resource Updating/Deleting/Failed
      attr_accessor :provisioning_state

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @sku.validate unless @sku.nil?
        @gateway_ip_configurations.each{ |e| e.validate if e.respond_to?(:validate) } unless @gateway_ip_configurations.nil?
        @ssl_certificates.each{ |e| e.validate if e.respond_to?(:validate) } unless @ssl_certificates.nil?
        @frontend_ip_configurations.each{ |e| e.validate if e.respond_to?(:validate) } unless @frontend_ip_configurations.nil?
        @frontend_ports.each{ |e| e.validate if e.respond_to?(:validate) } unless @frontend_ports.nil?
        @backend_address_pools.each{ |e| e.validate if e.respond_to?(:validate) } unless @backend_address_pools.nil?
        @backend_http_settings_collection.each{ |e| e.validate if e.respond_to?(:validate) } unless @backend_http_settings_collection.nil?
        @http_listeners.each{ |e| e.validate if e.respond_to?(:validate) } unless @http_listeners.nil?
        @request_routing_rules.each{ |e| e.validate if e.respond_to?(:validate) } unless @request_routing_rules.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.sku
        unless serialized_property.nil?
          serialized_property = ApplicationGatewaySku.serialize_object(serialized_property)
        end
        output_object['sku'] = serialized_property unless serialized_property.nil?

        serialized_property = object.operational_state
        output_object['operationalState'] = serialized_property unless serialized_property.nil?

        serialized_property = object.gateway_ip_configurations
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element|
            unless element.nil?
              element = ApplicationGatewayIpConfiguration.serialize_object(element)
            end
            serializedArray.push(element)
          end
          serialized_property = serializedArray
        end
        output_object['gatewayIpConfigurations'] = serialized_property unless serialized_property.nil?

        serialized_property = object.ssl_certificates
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element1|
            unless element1.nil?
              element1 = ApplicationGatewaySslCertificate.serialize_object(element1)
            end
            serializedArray.push(element1)
          end
          serialized_property = serializedArray
        end
        output_object['sslCertificates'] = serialized_property unless serialized_property.nil?

        serialized_property = object.frontend_ip_configurations
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element2|
            unless element2.nil?
              element2 = ApplicationGatewayFrontendIpConfiguration.serialize_object(element2)
            end
            serializedArray.push(element2)
          end
          serialized_property = serializedArray
        end
        output_object['frontendIpConfigurations'] = serialized_property unless serialized_property.nil?

        serialized_property = object.frontend_ports
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element3|
            unless element3.nil?
              element3 = ApplicationGatewayFrontendPort.serialize_object(element3)
            end
            serializedArray.push(element3)
          end
          serialized_property = serializedArray
        end
        output_object['frontendPorts'] = serialized_property unless serialized_property.nil?

        serialized_property = object.backend_address_pools
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element4|
            unless element4.nil?
              element4 = ApplicationGatewayBackendAddressPool.serialize_object(element4)
            end
            serializedArray.push(element4)
          end
          serialized_property = serializedArray
        end
        output_object['backendAddressPools'] = serialized_property unless serialized_property.nil?

        serialized_property = object.backend_http_settings_collection
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element5|
            unless element5.nil?
              element5 = ApplicationGatewayBackendHttpSettings.serialize_object(element5)
            end
            serializedArray.push(element5)
          end
          serialized_property = serializedArray
        end
        output_object['backendHttpSettingsCollection'] = serialized_property unless serialized_property.nil?

        serialized_property = object.http_listeners
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element6|
            unless element6.nil?
              element6 = ApplicationGatewayHttpListener.serialize_object(element6)
            end
            serializedArray.push(element6)
          end
          serialized_property = serializedArray
        end
        output_object['httpListeners'] = serialized_property unless serialized_property.nil?

        serialized_property = object.request_routing_rules
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element7|
            unless element7.nil?
              element7 = ApplicationGatewayRequestRoutingRule.serialize_object(element7)
            end
            serializedArray.push(element7)
          end
          serialized_property = serializedArray
        end
        output_object['requestRoutingRules'] = serialized_property unless serialized_property.nil?

        serialized_property = object.provisioning_state
        output_object['provisioningState'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [ApplicationGatewayPropertiesFormat] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = ApplicationGatewayPropertiesFormat.new

        deserialized_property = object['sku']
        unless deserialized_property.nil?
          deserialized_property = ApplicationGatewaySku.deserialize_object(deserialized_property)
        end
        output_object.sku = deserialized_property

        deserialized_property = object['operationalState']
        if (!deserialized_property.nil? && !deserialized_property.empty?)
          enum_is_valid = ApplicationGatewayOperationalState.constants.any? { |e| ApplicationGatewayOperationalState.const_get(e).to_s.downcase == deserialized_property.downcase }
          fail MsRest::DeserializationError.new('Error occured while deserializing the enum', nil, nil, nil) unless enum_is_valid
        end
        output_object.operational_state = deserialized_property

        deserialized_property = object['gatewayIpConfigurations']
        unless deserialized_property.nil?
          deserializedArray = [];
          deserialized_property.each do |element8|
            unless element8.nil?
              element8 = ApplicationGatewayIpConfiguration.deserialize_object(element8)
            end
            deserializedArray.push(element8);
          end
          deserialized_property = deserializedArray;
        end
        output_object.gateway_ip_configurations = deserialized_property

        deserialized_property = object['sslCertificates']
        unless deserialized_property.nil?
          deserializedArray = [];
          deserialized_property.each do |element9|
            unless element9.nil?
              element9 = ApplicationGatewaySslCertificate.deserialize_object(element9)
            end
            deserializedArray.push(element9);
          end
          deserialized_property = deserializedArray;
        end
        output_object.ssl_certificates = deserialized_property

        deserialized_property = object['frontendIpConfigurations']
        unless deserialized_property.nil?
          deserializedArray = [];
          deserialized_property.each do |element10|
            unless element10.nil?
              element10 = ApplicationGatewayFrontendIpConfiguration.deserialize_object(element10)
            end
            deserializedArray.push(element10);
          end
          deserialized_property = deserializedArray;
        end
        output_object.frontend_ip_configurations = deserialized_property

        deserialized_property = object['frontendPorts']
        unless deserialized_property.nil?
          deserializedArray = [];
          deserialized_property.each do |element11|
            unless element11.nil?
              element11 = ApplicationGatewayFrontendPort.deserialize_object(element11)
            end
            deserializedArray.push(element11);
          end
          deserialized_property = deserializedArray;
        end
        output_object.frontend_ports = deserialized_property

        deserialized_property = object['backendAddressPools']
        unless deserialized_property.nil?
          deserializedArray = [];
          deserialized_property.each do |element12|
            unless element12.nil?
              element12 = ApplicationGatewayBackendAddressPool.deserialize_object(element12)
            end
            deserializedArray.push(element12);
          end
          deserialized_property = deserializedArray;
        end
        output_object.backend_address_pools = deserialized_property

        deserialized_property = object['backendHttpSettingsCollection']
        unless deserialized_property.nil?
          deserializedArray = [];
          deserialized_property.each do |element13|
            unless element13.nil?
              element13 = ApplicationGatewayBackendHttpSettings.deserialize_object(element13)
            end
            deserializedArray.push(element13);
          end
          deserialized_property = deserializedArray;
        end
        output_object.backend_http_settings_collection = deserialized_property

        deserialized_property = object['httpListeners']
        unless deserialized_property.nil?
          deserializedArray = [];
          deserialized_property.each do |element14|
            unless element14.nil?
              element14 = ApplicationGatewayHttpListener.deserialize_object(element14)
            end
            deserializedArray.push(element14);
          end
          deserialized_property = deserializedArray;
        end
        output_object.http_listeners = deserialized_property

        deserialized_property = object['requestRoutingRules']
        unless deserialized_property.nil?
          deserializedArray = [];
          deserialized_property.each do |element15|
            unless element15.nil?
              element15 = ApplicationGatewayRequestRoutingRule.deserialize_object(element15)
            end
            deserializedArray.push(element15);
          end
          deserialized_property = deserializedArray;
        end
        output_object.request_routing_rules = deserialized_property

        deserialized_property = object['provisioningState']
        output_object.provisioning_state = deserialized_property

        output_object.validate

        output_object
      end
    end
  end
end
