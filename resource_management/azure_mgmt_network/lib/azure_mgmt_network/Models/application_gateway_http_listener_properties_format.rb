# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Network
  module Models
    #
    # Properties of Http listener of application gateway
    #
    class ApplicationGatewayHttpListenerPropertiesFormat

      include MsRestAzure

      # @return [SubResource] Gets or sets frontend IP configuration resource
      # of application gateway
      attr_accessor :frontend_ip_configuration

      # @return [SubResource] Gets or sets frontend port resource of
      # application gateway
      attr_accessor :frontend_port

      # @return [ApplicationGatewayProtocol] Gets or sets the protocol.
      # Possible values for this property include: 'Http', 'Https'.
      attr_accessor :protocol

      # @return [SubResource] Gets or sets ssl certificate resource of
      # application gateway
      attr_accessor :ssl_certificate

      # @return [String] Gets or sets Provisioning state of the http listener
      # resource Updating/Deleting/Failed
      attr_accessor :provisioning_state

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @frontend_ip_configuration.validate unless @frontend_ip_configuration.nil?
        @frontend_port.validate unless @frontend_port.nil?
        @ssl_certificate.validate unless @ssl_certificate.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.frontend_ip_configuration
        unless serialized_property.nil?
          serialized_property = SubResource.serialize_object(serialized_property)
        end
        output_object['frontendIpConfiguration'] = serialized_property unless serialized_property.nil?

        serialized_property = object.frontend_port
        unless serialized_property.nil?
          serialized_property = SubResource.serialize_object(serialized_property)
        end
        output_object['frontendPort'] = serialized_property unless serialized_property.nil?

        serialized_property = object.protocol
        output_object['protocol'] = serialized_property unless serialized_property.nil?

        serialized_property = object.ssl_certificate
        unless serialized_property.nil?
          serialized_property = SubResource.serialize_object(serialized_property)
        end
        output_object['sslCertificate'] = serialized_property unless serialized_property.nil?

        serialized_property = object.provisioning_state
        output_object['provisioningState'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [ApplicationGatewayHttpListenerPropertiesFormat] Deserialized
      # object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = ApplicationGatewayHttpListenerPropertiesFormat.new

        deserialized_property = object['frontendIpConfiguration']
        unless deserialized_property.nil?
          deserialized_property = SubResource.deserialize_object(deserialized_property)
        end
        output_object.frontend_ip_configuration = deserialized_property

        deserialized_property = object['frontendPort']
        unless deserialized_property.nil?
          deserialized_property = SubResource.deserialize_object(deserialized_property)
        end
        output_object.frontend_port = deserialized_property

        deserialized_property = object['protocol']
        if (!deserialized_property.nil? && !deserialized_property.empty?)
          enum_is_valid = ApplicationGatewayProtocol.constants.any? { |e| ApplicationGatewayProtocol.const_get(e).to_s.downcase == deserialized_property.downcase }
          fail MsRest::DeserializationError.new('Error occured while deserializing the enum', nil, nil, nil) unless enum_is_valid
        end
        output_object.protocol = deserialized_property

        deserialized_property = object['sslCertificate']
        unless deserialized_property.nil?
          deserialized_property = SubResource.deserialize_object(deserialized_property)
        end
        output_object.ssl_certificate = deserialized_property

        deserialized_property = object['provisioningState']
        output_object.provisioning_state = deserialized_property

        output_object.validate

        output_object
      end
    end
  end
end
