# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::NotificationHubs
  module Models
    #
    # SharedAccessAuthorizationRule properties.
    #
    class SharedAccessAuthorizationRuleProperties

      include MsRestAzure

      # @return [String] The primary key that was used.
      attr_accessor :primary_key

      # @return [String] The secondary key that was used.
      attr_accessor :secondary_key

      # @return [String] The name of the key that was used.
      attr_accessor :key_name

      # @return [String] The type of the claim.
      attr_accessor :claim_type

      # @return [String] The value of the claim.
      attr_accessor :claim_value

      # @return [Array<AccessRights>] The rights associated with the rule.
      attr_accessor :rights

      # @return [DateTime] The time at which the authorization rule was
      # created.
      attr_accessor :created_time

      # @return [DateTime] The most recent time the rule was updated.
      attr_accessor :modified_time

      # @return [Integer] The revision number for the rule.
      attr_accessor :revision

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @rights.each{ |e| e.validate if e.respond_to?(:validate) } unless @rights.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.primary_key
        output_object['primaryKey'] = serialized_property unless serialized_property.nil?

        serialized_property = object.secondary_key
        output_object['secondaryKey'] = serialized_property unless serialized_property.nil?

        serialized_property = object.key_name
        output_object['keyName'] = serialized_property unless serialized_property.nil?

        serialized_property = object.claim_type
        output_object['claimType'] = serialized_property unless serialized_property.nil?

        serialized_property = object.claim_value
        output_object['claimValue'] = serialized_property unless serialized_property.nil?

        serialized_property = object.rights
        output_object['rights'] = serialized_property unless serialized_property.nil?

        serialized_property = object.created_time
        serialized_property = serialized_property.new_offset(0).strftime('%FT%TZ')
        output_object['createdTime'] = serialized_property unless serialized_property.nil?

        serialized_property = object.modified_time
        serialized_property = serialized_property.new_offset(0).strftime('%FT%TZ')
        output_object['modifiedTime'] = serialized_property unless serialized_property.nil?

        serialized_property = object.revision
        output_object['revision'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [SharedAccessAuthorizationRuleProperties] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = SharedAccessAuthorizationRuleProperties.new

        deserialized_property = object['primaryKey']
        output_object.primary_key = deserialized_property

        deserialized_property = object['secondaryKey']
        output_object.secondary_key = deserialized_property

        deserialized_property = object['keyName']
        output_object.key_name = deserialized_property

        deserialized_property = object['claimType']
        output_object.claim_type = deserialized_property

        deserialized_property = object['claimValue']
        output_object.claim_value = deserialized_property

        deserialized_property = object['rights']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element1|
            if (!element1.nil? && !element1.empty?)
              enum_is_valid = AccessRights.constants.any? { |e| AccessRights.const_get(e).to_s.downcase == element1.downcase }
              warn 'Enum AccessRights does not contain ' + element1.downcase + ', but was received from the server.' unless enum_is_valid
            end
            deserialized_array.push(element1)
          end
          deserialized_property = deserialized_array
        end
        output_object.rights = deserialized_property

        deserialized_property = object['createdTime']
        deserialized_property = DateTime.parse(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.created_time = deserialized_property

        deserialized_property = object['modifiedTime']
        deserialized_property = DateTime.parse(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.modified_time = deserialized_property

        deserialized_property = object['revision']
        deserialized_property = Integer(deserialized_property) unless deserialized_property.to_s.empty?
        output_object.revision = deserialized_property

        output_object
      end
    end
  end
end
