# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Authorization
  module Models
    #
    # Role definition properties.
    #
    class RoleDefinitionProperties

      include MsRestAzure

      # @return [String] Gets or sets role name.
      attr_accessor :role_name

      # @return [String] Gets or sets role definition description.
      attr_accessor :description

      # @return [String] Gets or sets role type.
      attr_accessor :type

      # @return [Array<Permission>] Gets or sets role definition permissions.
      attr_accessor :permissions

      # @return [Array<String>] Gets or sets role definition assignable scopes.
      attr_accessor :assignable_scopes

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @permissions.each{ |e| e.validate if e.respond_to?(:validate) } unless @permissions.nil?
        @assignable_scopes.each{ |e| e.validate if e.respond_to?(:validate) } unless @assignable_scopes.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.role_name
        output_object['roleName'] = serialized_property unless serialized_property.nil?

        serialized_property = object.description
        output_object['description'] = serialized_property unless serialized_property.nil?

        serialized_property = object.type
        output_object['type'] = serialized_property unless serialized_property.nil?

        serialized_property = object.permissions
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element|
            unless element.nil?
              element = Permission.serialize_object(element)
            end
            serializedArray.push(element)
          end
          serialized_property = serializedArray
        end
        output_object['permissions'] = serialized_property unless serialized_property.nil?

        serialized_property = object.assignable_scopes
        output_object['assignableScopes'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [RoleDefinitionProperties] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = RoleDefinitionProperties.new

        deserialized_property = object['roleName']
        output_object.role_name = deserialized_property

        deserialized_property = object['description']
        output_object.description = deserialized_property

        deserialized_property = object['type']
        output_object.type = deserialized_property

        deserialized_property = object['permissions']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element2|
            unless element2.nil?
              element2 = Permission.deserialize_object(element2)
            end
            deserialized_array.push(element2)
          end
          deserialized_property = deserialized_array
        end
        output_object.permissions = deserialized_property

        deserialized_property = object['assignableScopes']
        output_object.assignable_scopes = deserialized_property

        output_object
      end
    end
  end
end
