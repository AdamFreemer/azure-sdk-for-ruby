# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Compute
  module Models
    #
    # Api error base.
    #
    class ApiErrorBase

      include MsRestAzure

      # @return [String] Gets or sets the error code.
      attr_accessor :code

      # @return [String] Gets or sets the target of the particular error.
      attr_accessor :target

      # @return [String] Gets or sets the error message.
      attr_accessor :message

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        # Nothing to validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.code
        output_object['code'] = serialized_property unless serialized_property.nil?

        serialized_property = object.target
        output_object['target'] = serialized_property unless serialized_property.nil?

        serialized_property = object.message
        output_object['message'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [ApiErrorBase] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = ApiErrorBase.new

        deserialized_property = object['code']
        output_object.code = deserialized_property

        deserialized_property = object['target']
        output_object.target = deserialized_property

        deserialized_property = object['message']
        output_object.message = deserialized_property

        output_object
      end
    end
  end
end
