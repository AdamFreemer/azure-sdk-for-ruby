# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Compute
  module Models
    #
    # The instance view of a virtual machine scale set.
    #
    class VirtualMachineScaleSetInstanceView

      include MsRestAzure

      # @return [VirtualMachineScaleSetInstanceViewStatusesSummary] Gets the
      # instance view status summary for the virtual machine scale set.
      attr_accessor :virtual_machine

      # @return [Array<VirtualMachineScaleSetVMExtensionsSummary>] Gets the
      # extensions information.
      attr_accessor :extensions

      # @return [Array<InstanceViewStatus>] Gets or sets the resource status
      # information.
      attr_accessor :statuses

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @virtual_machine.validate unless @virtual_machine.nil?
        @extensions.each{ |e| e.validate if e.respond_to?(:validate) } unless @extensions.nil?
        @statuses.each{ |e| e.validate if e.respond_to?(:validate) } unless @statuses.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.virtual_machine
        unless serialized_property.nil?
          serialized_property = VirtualMachineScaleSetInstanceViewStatusesSummary.serialize_object(serialized_property)
        end
        output_object['virtualMachine'] = serialized_property unless serialized_property.nil?

        serialized_property = object.extensions
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element|
            unless element.nil?
              element = VirtualMachineScaleSetVMExtensionsSummary.serialize_object(element)
            end
            serializedArray.push(element)
          end
          serialized_property = serializedArray
        end
        output_object['extensions'] = serialized_property unless serialized_property.nil?

        serialized_property = object.statuses
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element1|
            unless element1.nil?
              element1 = InstanceViewStatus.serialize_object(element1)
            end
            serializedArray.push(element1)
          end
          serialized_property = serializedArray
        end
        output_object['statuses'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [VirtualMachineScaleSetInstanceView] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = VirtualMachineScaleSetInstanceView.new

        deserialized_property = object['virtualMachine']
        unless deserialized_property.nil?
          deserialized_property = VirtualMachineScaleSetInstanceViewStatusesSummary.deserialize_object(deserialized_property)
        end
        output_object.virtual_machine = deserialized_property

        deserialized_property = object['extensions']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element2|
            unless element2.nil?
              element2 = VirtualMachineScaleSetVMExtensionsSummary.deserialize_object(element2)
            end
            deserialized_array.push(element2)
          end
          deserialized_property = deserialized_array
        end
        output_object.extensions = deserialized_property

        deserialized_property = object['statuses']
        unless deserialized_property.nil?
          deserialized_array = []
          deserialized_property.each do |element3|
            unless element3.nil?
              element3 = InstanceViewStatus.deserialize_object(element3)
            end
            deserialized_array.push(element3)
          end
          deserialized_property = deserialized_array
        end
        output_object.statuses = deserialized_property

        output_object
      end
    end
  end
end
