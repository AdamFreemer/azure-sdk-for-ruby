# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::CDN
  module Models
    #
    # Model object.
    #
    class EndpointPropertiesUpdateParameters

      include MsRestAzure

      # @return [String] The host header CDN provider will send along with
      # content requests to origins. The default value would be the host name
      # of the origin.
      attr_accessor :origin_host_header

      # @return [String] The path used for origin requests
      attr_accessor :origin_path

      # @return [Array<String>] List of content types on which compression
      # will be applied. The value for the elements should be Internet media
      # type.
      attr_accessor :content_types_to_compress

      # @return [Boolean] Indicates whether the compression is enabled.
      # Default value is false. If compression is enabled, the content
      # transferred from cdn endpoint to end user will be compressed. The
      # requested content must be larger than 1 byte and smaller than 1 MB.
      attr_accessor :is_compression_enabled

      # @return [Boolean] Indicates whether http traffic is allowed on the
      # endpoint. Default value is true. At least one protocol (http or
      # https) must be allowed.
      attr_accessor :is_http_allowed

      # @return [Boolean] Indicates whether https traffic is allowed on the
      # endpoint. Default value is true. At least one protocol (http or
      # https) must be allowed.
      attr_accessor :is_https_allowed

      # @return [QueryStringCachingBehavior] Defines the query string caching
      # behavior. Possible values include: 'IgnoreQueryString',
      # 'BypassCaching', 'UseQueryString', 'NotSet'
      attr_accessor :query_string_caching_behavior

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @content_types_to_compress.each{ |e| e.validate if e.respond_to?(:validate) } unless @content_types_to_compress.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.origin_host_header
        output_object['originHostHeader'] = serialized_property unless serialized_property.nil?

        serialized_property = object.origin_path
        output_object['originPath'] = serialized_property unless serialized_property.nil?

        serialized_property = object.content_types_to_compress
        output_object['contentTypesToCompress'] = serialized_property unless serialized_property.nil?

        serialized_property = object.is_compression_enabled
        output_object['isCompressionEnabled'] = serialized_property unless serialized_property.nil?

        serialized_property = object.is_http_allowed
        output_object['isHttpAllowed'] = serialized_property unless serialized_property.nil?

        serialized_property = object.is_https_allowed
        output_object['isHttpsAllowed'] = serialized_property unless serialized_property.nil?

        serialized_property = object.query_string_caching_behavior
        output_object['queryStringCachingBehavior'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [EndpointPropertiesUpdateParameters] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = EndpointPropertiesUpdateParameters.new

        deserialized_property = object['originHostHeader']
        output_object.origin_host_header = deserialized_property

        deserialized_property = object['originPath']
        output_object.origin_path = deserialized_property

        deserialized_property = object['contentTypesToCompress']
        output_object.content_types_to_compress = deserialized_property

        deserialized_property = object['isCompressionEnabled']
        output_object.is_compression_enabled = deserialized_property

        deserialized_property = object['isHttpAllowed']
        output_object.is_http_allowed = deserialized_property

        deserialized_property = object['isHttpsAllowed']
        output_object.is_https_allowed = deserialized_property

        deserialized_property = object['queryStringCachingBehavior']
        if (!deserialized_property.nil? && !deserialized_property.empty?)
          enum_is_valid = QueryStringCachingBehavior.constants.any? { |e| QueryStringCachingBehavior.const_get(e).to_s.downcase == deserialized_property.downcase }
          warn 'Enum QueryStringCachingBehavior does not contain ' + deserialized_property.downcase + ', but was received from the server.' unless enum_is_valid
        end
        output_object.query_string_caching_behavior = deserialized_property

        output_object
      end
    end
  end
end
